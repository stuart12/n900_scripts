#!/usr/bin/python
# -*- coding: utf-8 -*-
# n900contacts Copyright (c) 2011, 2012  Stuart Pook (http://www.pook.it/)
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY orFITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# run on a machine that has python-vobject. This machine must be able to run a command on the Nokia N900 using "ssh n900"

# with no options just look for a contact as given in the arguments

# show all the fred's in the contact list on the N900
#	n900_contacts fred

# print a short list of important contacts formatted using groff
#	n900_contacts -p | lp

# print a longer list of important and medium contacts
#	n900_contacts -P | lp

# An important contact is a contact with gender male or female. A medium contact is a contact with an undefinded gender.
# The printed output is formated for A4 paper.

from __future__ import print_function

import sys;
import os;
import re;
import unicodedata;
import locale
import tempfile
import vobject
import subprocess
import optparse

class MyError(Exception):
	pass

def format_number(number, options):
	if number.find('p') >= 0:
		p = re.compile('^.*p')
		number = p.sub('', number)
		if number.startswith('00'):
			number = '+' + number[2:]
	else:
		if number.startswith('00'):
			number = '+' + number[2:]
		if number.startswith('+33'):
			number = '0' + number[3:]
		if options.dots and number.startswith('0'):
			p = re.compile(r'(\d\d)')
			number = p.sub(r'\1.', number)
			number = number[0:-1]
	return number

def insert(set, value):
	n = len(set)
	set.add(value)
	return n != len(set)
	
def format_contact(contact, troff, min_pager, options):
	if troff:
		or_mark = r" \(or "
	else:
		or_mark = " | "
	if troff:
		nbsp = r'\ '
	else:
		nbsp = ' '
	try:
		nv = contact.n.value
	except AttributeError:
		return ''
	name = ''
	for k in (nv.prefix, nv.given, nv.family, nv.suffix, nv.additional):
		if k != '' and name != '':
			name = name + " "
		name = name + k
	if troff:
		out = r'\fB' + name + r'\fP'
	else:
		out = name + ','

	pager = 0
	for g in contact.contents.get('x-gender', []):
		if g.value == 'female' or g.value == "male":
			pager = 2
		else:
			pager = 1
	
	numbers = set()
	for number in contact.contents.get('tel', []):
		tag = ''
		for type in number.params['TYPE']:
			if type == 'CELL':
				tag += 'm'
			elif type == 'HOME':
				tag += 'h'
			elif type == 'FAX':
				tag += 'f'
			elif type == 'WORK':
				tag += 'w'
			elif type == 'PAGER':
				break
		else:
			formated_number = format_number(number.value, options)
			if insert(numbers, formated_number):
				out += ' '
				if tag:
					out += tag + nbsp
				out += formated_number
	if pager < min_pager:
		return ''

	for number in contact.contents.get('x-sip', []):
		formated_number = format_number(number.value.partition('@')[0], options)
		if insert(numbers, formated_number):
			out += ' s' + nbsp + formated_number

	for address in contact.contents.get('adr', []):
		tag = ''
		try:
			for type in address.params['TYPE']:
				if type == 'HOME':
					tag += 'h'
				elif type == 'WORK':
					tag += 'w'
		except KeyError:
			pass
		v = address.value
		for v in (v.box, v.extended, v.street, v.code, v.city, v.region, v.country):
			if len(v) > 0:
				out += ' '
				if len(tag):
					out += tag + nbsp
					tag = ''
				for vv in v:
					out += vv

	if 'note' in contact.contents:
		done1 = False
		for note in contact.contents['note']:
			if len(note.value):
				if done1:
					out += or_mark
				else:
					out += ' ('
					done1 = True
				out += note.value
		if done1:
			out += ')'

	for email in contact.contents.get('email', []):
		if troff:
			out += ' ' + email.value.replace('@', '\\:@').replace('.', '\\:.')
		else:
			out += ' ' + email.value
			
	return out

def strip_accents(uc):
	if uc == '':
		return ''
		
	c = unicodedata.normalize('NFD', uc)
	d = ""
	for i in c:
		if unicodedata.combining(i) == 0:
			d += i
	return d

def eclose(evolution, errors, cmd):
	if evolution.wait() != 0:
		errors.seek(0)
		sys.stderr.writelines(errors)
		raise MyError("%s failed (%d)" % (cmd[0], evolution.returncode))

def matcher(unicode, expressions, what):
#	print "matching", what, "=", `unicode`
	for e in expressions:
		if e.search(strip_accents(unicode)):
			return True
	return False


def match(contact, expressions):
#	print contact
	for k in ("org", ):
		if k in contact.contents:
			for l in contact.contents[k]:
				for m in l.value:
					if (matcher(m, expressions, k)):
						return True
				
	for k in ("n",):
		if k in contact.contents:
			for l in contact.contents[k]:
#				print "n 1= ", dir(l)
#				print "n a= ", l.prettyPrint()
#				print "n 2= ", `l.value`
#				print "n 3= ", dir(l.value)
#				print "n 3 given = ", `l.value.given`
#				print "n5=", strip_accents(l.value.given)
#				print "n6=", strip_accents(l.value.family)
				if (matcher(l.value.suffix, expressions, k + " suffix")):
					return True
				if (matcher(l.value.additional, expressions, k + " additional")):
					return True
				if (matcher(l.value.prefix, expressions, k + " prefix")):
					return True
				if (matcher(l.value.given, expressions, k + " given")):
					return True
				if (matcher(l.value.family, expressions, k + " family")):
					return True
					
	for k in ("fn",):
		if k in contact.contents:
			for l in contact.contents[k]:
				if (matcher(l.value, expressions, k)):
					return True
			
	return False
	
def show_contacts(vcal, args, options):
	expressions = []
	for a in args:
		expressions.append(re.compile(strip_accents(a.decode('utf-8')), re.IGNORECASE))
	for contact in vobject.readComponents(vcal):
		if (match(contact, expressions)):
#			print dir(contact), contact.n.value.__doc__, `contact.n.value.given`, dir(contact.n.value)
			print(format_contact(contact, False, 0, options).encode('utf-8'))
#		express: for e in expressions:
#			for k in ("fn", "n", "org"):
#				if k in contact.contents:
#			for k in contact.contents:
#					print k, "is", contact.contents[k]
#					if e.search(strip_accents(contact.contents[k])):
#						print dir(contact)
#				for z in contact.getChildren():
#					print z
#					print format_contact(contact, False, 0).encode('utf-8')
#					break express
#	eclose(evolution, errors)

class null_subprocess():
	def __init__(self, stdout):
		self.stdout = stdout
	def wait(self):
		return 0

def main():
	myname = os.path.basename(sys.argv[0])
# ugly hack for http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=569273
	get_contacts= ["ssh", "-xn", "n900",
		"t=`mktemp /tmp/cXXXXXX` && run-standalone.sh osso-addressbook-backup -e $t && sed -e 's/\\\\,/,/g' $t && rm $t"]
	
	parser = optparse.OptionParser()
	parser.add_option("-g", "--groff", action="store_true", help="produce groff output")
	parser.add_option("-p", "--short_postscript", action="store_true", help="produce PostScript list")
	parser.add_option("-P", "--full_postscript", action="store_true", help="produce full PostScript list")
	parser.add_option("-f", "--full", action="store_true", help="produce full list")
	parser.add_option("-d", "--dots", action="store_true", help="add dots to numbers")
	parser.add_option("-u", "--utf8", action="store_true", help="product a full UTF-8 list")
	parser.add_option("--stdin", action="store_true", help="read stdin")
	parser.add_option("--dump", action="store_true", help="dump the raw contact list")
	parser.add_option("--print", dest="print_list", action="store_true", help="print")
	parser.add_option("--text_size", type='float', help="text size")
	parser.add_option("--host", default="n900", help="host to contact [%default]")

	(options, args) = parser.parse_args()
	
	get_contacts= ["ssh", "-xn", options.host,
		"t=`mktemp /tmp/cXXXXXX` && run-standalone.sh osso-addressbook-backup -e $t && sed -e 's/\\\\,/,/g' $t && rm $t"]
	
#	opts, args = getopt.getopt(sys.argv[1:], "grupP", ["groff", "ps", "utf8", "dots", "stdin"])

#	of_print = "print"
#	of_utf8 = "utf8"
#	of_postscript = "postscript"
#	of_groff = "groff"
#	output_format = "print"
#	print_list = False
#	big_print = False
#	groff_arg1 = "-P"
#	groff_arg2 = "-pA4"
#	output_format = of_postscript
#	add_dots_to_number = False
#	use_stdin = False
#	for o, a in opts:
#		if o == "--ps":
#			output_format = of_postscript
#			print_list = True
#		elif o == "-p":
#			print_list = True
#			big_print = False
#		elif o == "--dots":
#			add_dots_to_number = True
#		elif o == "-P":
#			print_list = True
#			big_print = True
#		elif o in ("--stdin"):
#			use_stdin = True
#		elif o in ("--utf8", '-u'):
#			big_print = True
#			output_format = of_utf8
#			print_list = True
#			groff_arg1 = "-T"
#			groff_arg2 = "utf8"
#		elif o in ("--groff", "-g"):
#			output_format = of_groff
#			print_list = True
			

	#locale.setlocale(locale.LC_COLLATE, 'fr_FR.iso885915@euro')
	locale.setlocale(locale.LC_ALL, '')
	locale.setlocale(locale.LC_COLLATE, 'fr_FR.UTF-8')
	
	if options.dump:
		os.execvp(get_contacts[0], get_contacts)
		
	errors = tempfile.TemporaryFile()
	if options.stdin:
		evolution = null_subprocess(sys.stdin)
	else:
		evolution = subprocess.Popen(get_contacts, bufsize = -1, stdout = subprocess.PIPE, stderr = errors, close_fds = True)

	if not options.short_postscript and not options.full_postscript and not options.utf8 and not options.groff:
		show_contacts(evolution.stdout, args, options)
		eclose(evolution, errors, get_contacts)
		return

	full = options.full_postscript or options.full

	if options.groff:
		output = sys.stdout
	else:
		output = tempfile.TemporaryFile()
	mess = """.\\"
.af minutes 00
.kern
.fam HN
.nh
.na
.nr topmargin 0.5c
.po 0.7c
.ll 19.8c
.pl 29.7c
.sp \\n[topmargin]u
"""
	output.write(mess)

	if full:
		sz = 11
		if options.text_size:
			sz = options.text_size
		output.write('.ps %f\n' % sz)
			
		mess = """.\\"
.vs \\n[.s]+0.9
.de NP
'bp
'sp \\n[topmargin]u
..
.wh -0.8c NP
"""
	else:
		sz = 7.8
		if options.text_size:
			sz = options.text_size
		output.write('.ps %f\n' % sz)
		mess = """.\\"
.vs \\n[.s]+0.4
.ll 15c
.de NP
' bp
' sp \\n[topmargin]u
' po +4.4c
..
.wh 7.2c NP
"""
	output.write(mess)
	if options.utf8:
			output.write('.ll 26c\n')
			output.write('.po 0\n')
			output.write('.wh 7.2c\n')

	output.write(r'\n[hours]:\n[minutes] \n[dy]/\n[mo]/\n[year]' + '\n')
	if full:
		output.write('.sp 0.3\n')

	contacts = []
	for contact in vobject.readComponents(evolution.stdout):
		line = format_contact(contact, True, full and 1 or 2, options)
		if line:
			contacts.append(line)

	eclose(evolution, errors, get_contacts)

	contacts.sort(locale.strcoll)

	for line in contacts:
		euro = u'\u20ac'
		line = line.replace(euro, r'\[eu]')
		output.write(line.encode('iso8859-1'))
		output.write('\n')
		if full:
			output.write('.br\n')

	output.write('\n')

	if options.groff:
		return

	output.flush()
	output.seek(0)

	postscript = tempfile.TemporaryFile()
	child = os.fork()
	if child == 0:
		os.dup2(output.fileno(), 0)
		if options.print_list:
			os.dup2(postscript.fileno(), 1)
		cmd = ["groff"]
		if options.utf8:
			cmd.extend(["-T", "utf8"])
		else:
			cmd.extend(["-P", "-pA4"])
		os.execvp(cmd[0], cmd)
		sys.exit("execl failed")
	pid, status = os.waitpid(child, 0)
	if status:
		sys.exit('groff failed: %d' % status)

	if not options.print_list:
		return

	if full:
		printer = "lp"
	else:
		printer = "lph"

	options = popen2.Popen3("lpoptions")
	lpoptions = options.fromchild.readline()
	options.fromchild.close()
	turn_over = options.wait() != 0 or not "Duplex=Duplex" in lpoptions

	postscript.seek(0)
	child = os.fork()
	if child == 0:
		os.dup2(postscript.fileno(), 0)
		if turn_over:
			os.execlp(printer, printer, "-P1")
		else:
			os.execlp(printer, printer)
		sys.exit("execl failed")
	pid, status = os.waitpid(child, 0)
	if status:
		sys.exit(printer + ' failed')

	if turn_over:
		print("turn the paper over and hit return ", end="")
		sys.stdin.readline()
		
		postscript.seek(0)
		child = os.fork()
		if child == 0:
			os.dup2(postscript.fileno(), 0)
			os.execlp(printer, printer, "-P2")
			sys.exit("execl failed")
		pid, status = os.waitpid(child, 0)
		if status:
			sys.exit(printer + ' failed')

if __name__ == "__main__":
	main()
